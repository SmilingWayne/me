/*
select distinct product_type, regist_date from product;
只需要一个distinct语句就行啦*/

/*select product_name from shop.product where product_type ="衣服";*/

-- 注释语句在这里!

-- select product_name ,sale_price,sale_price*2 as "sale_price_X2"
-- from product;
-- 直接再在后面加上运算符号就行
/*create table chars
(chr char(3) not null,
primary key(chr));
start Transaction;
INSERT INTO Chars VALUES ('1');
INSERT INTO Chars VALUES ('2');
INSERT INTO Chars VALUES ('3');
INSERT INTO Chars VALUES ('10');
INSERT INTO Chars VALUES ('11');
INSERT INTO Chars VALUES ('222');

COMMIT;
*/

/*select product_name,product_type,  sale_price*0.9 - purchase_price as profit from product
where sale_price*0.9 - purchase_price > 100 
And (product_type = "办公用品" or product_type = "厨房用具");
*/

-- Chapter 3: 聚合
-- 加一句注释：如果想要展示两个count，一定要在select里面把这两个count全都表达出来
/*select COUNT(regist_date) ,COUNT(*)
from product;
*/
/*count 是用来计算非null的个数的,除非使用count(*)*/

-- select AVG(sale_price),AVG(purchase_price)
-- from product
-- 会事先删除null再进行计算


/*select distinct product_type
from product;

select product_type 
from product
group by product_type;
*/
/*select product_type, COUNT(*)
from product
group by product_type
HAVING COUNT(*) =2;
*/

/*select product_type, COUNT(*)
from product
group by product_type
having count(*) = 2;
*/

-- select product_id as pi, product_name as pn,sale_price as pp,purchase_price as pup
-- from product
-- order by pi ASC;

/*select product_id, product_name, sale_price as sp, purchase_price
from product
order by sp DESC , purchase_price;
*/
-- 294

/*create table productIns
(product_id char(4) not null,
product_name varchar(100) not null,
product_type varchar(32) not null,
sale_price integer default 0,
purchase_price integer ,
regist_date date ,
primary key(product_id));
*/


/*INSERT INTO ProductIns VALUES ('0002', '打孔器', '办公用品', 500, 320, '2009-09-11'),
('0003', '运动T恤', '衣服', 4000, 2800,NULL),
('0004', '菜刀', '厨房用具', 3000, 2800, '2009-09-20');
select * from productIns;
*/

/*CREATE TABLE ProductCopy
(product_id      CHAR(4)      NOT NULL,
 product_name    VARCHAR(100) NOT NULL,
 product_type    VARCHAR(32)  NOT NULL,
 sale_price      INTEGER      ,
 purchase_price  INTEGER      ,
 regist_date      Date         ,
 primary key(product_id));
 insert into productCopy(product_id, product_name, product_type, sale_price, purchase_price, regist_date)
 select product_id, product_name, product_type,sale_price,purchase_price,regist_date 
 from product;
*/

-- 上述代码可用于数据备份--
/*create table ProductType
(product_type varchar(32) not null,
sum_sale_price integer ,
sum_purchase_price Integer ,
primary key(product_type));
insert into productType 
select product_type, SUM(sale_price),SUM(purchase_price)
from product 
group by product_type;
select * from productType;
*/

/*create view productSum(product_type, cun_product)
AS
select product_type, count(*)
from product
group by product_type;*/

/*create view productSumJim(product_type, cut_product)
AS 
select product_type,cun_product
from productSUm
where product_type = '办公物品';
*/

/*create view productSum2(product_type,cnt_product)
AS
select product_type, count(*)
from product
group by product_type;
select product_type,cnt_product from productSum2;

*/

/*create view ViewPractice5_1(product_name,sale_price,regist_date)
As 
select product_name,sale_price,regist_date
from product
where sale_price > 1000 and regist_date = '2009-09-20';
select * from ViewPractice5_1;
-- select AVG(sale_price)
-- from product;
*/

-- 上面这个就是视图的创建和展示
/*insert into viewPractice5_1 values('刀子',300,'2009-11-02');
select * from viewpractice5_1;
像这样子直接加入会失败，报错：doesn't have a default value*/

/*select product_id, product_name,sale_price
from product
where sale_price > (select AVG(sale_price) from product);
*/
-- where 子句不能使用聚合函数,可以使用如上方法描述alter


/*select product_id, product_name,sale_price ,(select AVG(sale_price) from product ) as avg_price 
from product
group by product_id;
*/

/*select product_type,product_name,sale_price
 from product as P1
where sale_price > (select AVG(sale_price) from Product as P2 
where p1.product_type = p2.product_type group by product_type);
*/
/*select product_id,product_name,product_type,sale_price,(select AVG(sale_price) from product ) as sale_price_all
from product;
*/

/*select product_id,product_name,product_type,sale_price, (select AVG(sale_price) from product as p2 
where p1.product_type = p2.product_type group by product_type) as avg_sale_price  
from product as p1;
这一段还是比较重要的，其实关键的地方在于如何分配where的位置。。。。

*/
/*create view AVgPriceByType as
select product_id,product_name,product_type,sale_price, (select AVG(sale_price) from product as p2 
where p1.product_type = p2.product_type group by product_type) as avg_sale_price  
from product as p1;
select * from AVgPriceByType;
*/

/*select m,ABS(m) as abs_col
from sampleMath;
*/
/*select n,p,
mod(n,p) as mod_col
from sampleMath;
-- 这里注意了，只有整数运算可以mod，小数是不能mod运算的
*/
/*select m,n,round(m,n) as round_col
from sampleMath;
-- 这里的n表示n列位数，进行四舍五入处理*/
-- select str1,str2,concat(str1,str2) as str_concat
-- from samplestr;
/*注意一下，在SQL server里头是 str1 || str2为拼接函数 */

-- select str1, length(str1) as len_str1
-- from samplestr;
/*select str1, lower(str1) as low_str,upper(str1) as upper_str
from samplestr 
where str1 in ('ABC','aBC','abc','山田');*/
-- 大小写转换


/*
revoke alter table on dep
from XX

revoke alter table on worker
from XX
*/

create view View_dep
as
select * from
dep;

/*1）用户王明对两个表具有select权限。

Grant select on 职工，部门 to 王明
grant select on view_dep to 王明;

（2）用户李勇对两个表有insert和delete权限。

Grant insert,delete on 职工，部门 to 李勇

（3）每个职工只对自己的纪录有select权限。

Grant select on 职工 with user()=name to all;


（4）用户刘星对职工表有select权限，对工资字段具有更新权限。

Grant select,update(工资) on 职工 to 刘星

（5）用户张新具有修改这两个表的结构的权限。

Grant alter table on 职工,部门 to 张新;
with grant option;

（6）用户周平具有对两个表的所有权限（读、插、改、删数据），并具有给其他用户授权的权限。

Grant all privileges on 职工,部门 to 周平 with grant option;

revoke all privileges on dep
from 周平;


（7）用户杨兰具有从每个部门职工中select最高工资、最低工资、平均工资的权限，他不能查看每个人的工资。

Create view 部门工资 as

     Select 部门,名称,max(工资),min(工资),avg(工资)

     from 职工,部门 where 职工.部门号=部门.部门号

     Group by 职工,部门号

Grant select  on 部门工资 to 杨兰;




*/


create table 职工
(职工号 char(10) not null primary key,
姓名 char(10) not null,
年龄 int not null,
职务 char(20) not null,
部门号 smallint not null,
foreign key 职工(部门号) references 部门(部门号),
constraint C1 check(年龄 <= 60)
);























